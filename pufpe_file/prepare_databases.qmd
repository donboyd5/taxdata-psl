---
output: html_document
editor_options: 
 chunk_output_type: console
---

# Prepare database

## Setup

```{r}
#| label: setup
#| output: false

source(here::here("r", "libraries.r"))
source(here::here("r", "constants.r"))
source(here::here("r", "functions.r"))

```

```{=html}
<!-- links


-->
```


```{r}
#| label: constants


```


## Download files (not implemented yet)

```{r}
#| label: download-files
#| eval: false

# only update when the pe files change
gdfolder <- "https://drive.google.com/drive/u/0/folders/1rprMf8noDkXd48OpwXCFBbFOpuyldaKZ"

# https://drive.google.com/file/d/11sFN2KxikUFeDWkdhhfLbnihGD6pB4-0/view?usp=drive_link

gzname <- "tax_microdata_2015.csv.gz"
upath <- path(gdfolder, gzname)

# permissions needed for the following (?)
# drive_download(file=upath, path = path(tddir, gzname), overwrite = TRUE)

# following does not work:
# upath <- "https://drive.google.com/file/d/11sFN2KxikUFeDWkdhhfLbnihGD6pB4-0/view?usp=drive_link"
# download.file(url=upath, destfile = path(tddir, gzname), mode="wb")

```


## Create arrow databases out of zipped csv files


### Tax-calculator taxdata files

```{r}
#| label: get-tctd-data
#| eval: false  # only eval when data have changed

## read the files ----
# renamed original files from Martin from td15.zip to td15_pw.zip (for password, etc.)
gzpre <- "td"
gzsfx <- ".zip"
gzfiles <- paste0(gzpre, c(15, 21, 23), gzsfx)
(gzpaths <- path(dtdfiles, gzfiles))

# use this when we have year on the data files, but not until then
# tctd <- open_dataset(
#   # sources = fs::path(dyfiles, "tax_microdata_2015.csv.gz"),
#   sources = gzpaths,
#   col_types = schema(ISBN = string()),
#   format = "csv"
# )
# count(tctd, FLPDYR) |> collect()

df1 <- vroom(gzpaths, id="fname")
ns(df1)
count(df1, fname, FLPDYR)

df1 <- df1 |> 
  mutate(year=FLPDYR |> as.integer()) |>
  relocate(year, .after=fname)
glimpse(df1)
ns(df1)

# system.time(saveRDS(df1, here::here("data", "ystacked.rds"))) # 22 secs

# save as arrow database
a <- proc.time()
df1 |>
  group_by(year) |>
  write_dataset(path = dpqtctd, format = "parquet", existing_data_behavior = "overwrite")
b <- proc.time()
b - a # 26 secs

# how big? about same as .gz files
tibble(
  files = list.files(dpqtctd, recursive = TRUE),
  size_MB = file.size(file.path(dpqtctd, files)) / 1024^2
)

# all we need to get the data is 
# tctd <- open_dataset(dpqtctd)
glimpse(tctd)


```


```{r}
#| label: get-pufpe-data
#| eval: false  # only eval when data have changed

## read the files ----
gzpre <- "tax_microdata_"
gzsfx <- ".csv.gz"
gzfiles <- paste0(gzpre, 2015:2026, gzsfx)
(gzpaths <- path(dyfiles, gzfiles))

df1 <- vroom(gzpaths, id="fname")
ns(df1)

# put name on file, and TEMPORARILY create c00100 and taxbc
df1 <- df1 |> 
  mutate(year=str_extract(fname, "\\d+") |> as.integer()) |> 
  mutate(c00100=e00200 * 1.25, taxbc=.1 * c00100) |> # temporary
  relocate(year, .after=fname)
glimpse(df1)
ns(df1)

# system.time(saveRDS(df1, here::here("data", "ystacked.rds"))) # 22 secs

# save as arrow database
a <- proc.time()
df1 |>
  group_by(year) |>
  write_dataset(path = dpqpufpe, format = "parquet", existing_data_behavior = "overwrite")
b <- proc.time()
b - a # 24 secs

# how big? about same as .gz files
tibble(
  files = list.files(dpqpufpe, recursive = TRUE),
  size_MB = file.size(file.path(dpqpufpe, files)) / 1024^2
)

# all we need to get the data is 
# pufpe <- open_dataset(dpqpufpe)
# glimpse(pufpe)


```


## Explore

Simple summary

```{r}
#| label: simple-summary

pufpe <- open_dataset(dpq)

ycuts <- c(-Inf, -1e-99, 0, 25e3, 50e3, 100e3, 200e3, 500e3, 1e6, Inf)

# df2 <- df1 |> 
#   mutate(agirange=cut(c00100, ycuts))
# count(sdf2, agirange)
  
tabdata <- pufpe |> 
  filter(year==2015) |> 
  collect() |> 
  mutate(agirange=cut(c00100, ycuts)) |> # cut is not supported in Arrow
  summarise(n=n(), nret=sum(s006), taxbc=sum(taxbc * s006), .by=c(year, agirange))

# tabdata |> 
#   gt() |> 
#   tab_header(
#     title = html("Comparison by AGI range of Policy Engine (pe), taxdata same variables (td), and taxdata all variables (tdall)"),
#     subtitle = html("Tax year 2023")
#   ) |>
#   tab_spanner(columns = starts_with("n_"),
#               label="# of records") |> 
#   tab_spanner(columns = starts_with("nret_"),
#               label=html("# of returns<br>(millions)")) |> 
#   tab_spanner(columns = starts_with("taxbc_"),
#               label=html("tax before credits<br>($ billions)")) |>   
#   tab_spanner(columns = starts_with("avgtaxbc_"),
#               label=html("average tax before credits<br>($ dollars)")) |> 
#   fmt_number(columns=starts_with("n_"),
#              decimals=0) |> 
#   fmt_number(columns=starts_with("nret_"),
#              scale=1e-6,
#              decimals=1) |> 
#   fmt_number(columns=starts_with("taxbc_"),
#              scale=1e-9,
#              decimals=1) |> 
#   fmt_number(columns=starts_with("avgtaxbc_"),
#              scale=1,
#              decimals=0) 
```


<!-- ### Simple totals by year -->

```{r}
#| label: explore-aggregate
#| eval: false
# options(max.print=20)

df1 |> 
  summarise(n=n(), wt=sum(s006), wages=sum(e00200 * s006), .by=year) |> 
  arrange(year) |> 
  mutate(avgwage=wages / wt,
         pchwt=wt / lag(wt) - 1,
         pchwages=wages / lag(wages) - 1,
         pchavgwage=avgwage / lag(avgwage) - 1) |> 
  gt() |> 
  fmt_number(columns=c(n, wt, avgwage),
             # scale=1e-9,
             decimals=0) |> 
  fmt_number(columns=c(wages),
             scale=1e-9,
             decimals=0) |> 
  fmt_percent(columns=starts_with("pch"),
              decimals=1)

```


<!-- ### Totals by year and filer status -->

```{r}
#| label: explore-filer-status
#| eval: false

df1 |> 
  summarise(n=n(), wt=sum(s006), wages=sum(e00200 * s006), .by=c(year, is_tax_filer)) |> 
  arrange(year) |> 
  mutate(avgwage=wages / wt,
         pchwt=wt / lag(wt) - 1,
         pchwages=wages / lag(wages) - 1,
         pchavgwage=avgwage / lag(avgwage) - 1,
         .by=is_tax_filer) |> 
  gt() |> 
  fmt_number(columns=c(n, wt, avgwage),
             # scale=1e-9,
             decimals=0) |> 
  fmt_number(columns=c(wages),
             scale=1e-9,
             decimals=0) |> 
  fmt_percent(columns=starts_with("pch"),
              decimals=1)

## |> opt_stylize(style = 1) 

```

