---
output: html_document
editor_options: 
 chunk_output_type: console
---


# Get files

## Load packages

```{r}
#| label: includes

source(here::here("r", "libraries.r"))

# E:\R_projects\projects\taxdata-psl\data\IRS spreadsheets

```

## Define folder names and other constants

```{r}
#| label: constants

dd <- here::here("data")

irsweb <- "https://www.irs.gov/pub/irs-soi/"  # static files
irsd <- path(dd, "IRS spreadsheets")
targfn <- "target_recipes.xlsx"

```


## Read the target_recipes tab that defines IRS table spreadsheets to download

```{r}
#| label: get-recipes
#| output: false

df1 <- read_excel(path(dd, targfn), sheet="irs_downloads")

tabmeta <- expand_grid(year=c(2015, 2021), df1) |> 
  mutate(fname=paste0(str_sub(year, 3, 4), fname_base),
         upath=paste0(baseurl, fname))

glimpse(tabmeta)

```


## Download the IRS spreadsheets (if the code chunk's eval option is set to TRUE)

```{r}
#| label: CAUTION-download-irs-spreadsheets
#| eval: false

# CAUTION: only re-download spreadsheets (set eval: true) if they have changed or been deleted

tabmeta

f <- function(upath){
  print(upath)
  download.file(url=upath, destfile=path(irsd, path_file(upath)), mode="wb")
}

walk(tabmeta$upath, f) # walk through the list of paths, downloading and saving each file

```

## Functions to read IRS spreadsheets

### Function to read mapping tab for an IRS spreadsheet (found in **target_recipes.xlsx**)

```{r}
#| label: irs-functions

get_rowmap <- function(tab){
  # reads the target_recipes.xlsx file to
  # get start and end row for key data for each year of a particular IRS spreadsheet
  # from its associated mapping tab in the recipes file
  # assumes dd (data directory) and targfn (targets filename) are in the environment
  sheet <- paste0(tab, "_map")
  read_excel(path(dd, targfn), sheet=sheet, range=cellranger::cell_rows(1:3)) |> 
    pivot_longer(-rowtype, values_to = "rownum") |> 
    mutate(table=tab,
           year=str_sub(name, -4, -1) |> as.integer(),
           rownum=as.integer(rownum)) |> 
    select(table, year, rowtype, rownum) |> 
    arrange(table, year, desc(rowtype))
}

xlcols <- function(n) {
  # create a vector of letters in the order that Excel uses
  # a helper function that allows us to put letter column names on a dataframe
  #   that was read from an Excel file
  # usage: 
  #   xlcols(53) 
  #   gets the letters for the first 53 columns in a spreadsheet
  # only good for 1- and 2-letter columns, or 26 + 26 x 26 = 702 columns
  xl_letters <- c(LETTERS, sapply(LETTERS, function(x) paste0(x, LETTERS, sep = "")))
  return(xl_letters[1:n])
}

get_colmap <- function(tab){
  # reads the target_recipes.xlsx file to
  # get columns of interest for each year of a particular IRS spreadsheet,
  # from its associated mapping tab in the recipes file
  
  # assumes dd (data directory), targfn (targets filename), and allcols are in the environment
  sheet <- paste0(tab, "_map")
  col_map <- read_excel(path(dd, targfn), sheet=sheet, skip=3) |> 
    pivot_longer(starts_with("column_"), values_to = "column_letter") |> 
    mutate(table=tab,
           year=str_sub(name, -4, -1) |> as.integer(),
           column_num=match(column_letter, allcols)) |> 
    select(table, year, column_num, column_letter, vname, description, units, notes) |> 
    filter(!is.na(column_letter), !is.na(vname)) |> 
    arrange(table, year, column_num)
  col_map
}

# get_colmap("tab11")

```


## Read IRS spreadsheets and save data frame of targets as csv file

```{r}
#| label: read-irs-spreadsheets
#| eval: true
#| output: false

allcols <- xlcols(400) # get a large number of potential excel column names
ht(allcols)


# tabs <- c("tab11", "tab12")
# tabs <- c("tab11", "tab12", "tab14")
tabs <- c("tab11", "tab12", "tab14", "tab21")

# get start and end rows for each file of interest
tabrows <- tabs |> 
  purrr::map(get_rowmap) |> 
  list_rbind() |> 
  pivot_wider(names_from = rowtype, values_from = rownum)
tabrows

tabcols <- tabs |> 
  purrr::map(get_colmap) |> 
  list_rbind()
tabcols

tabcols_nested <- tabcols |> 
  summarise(maxcol=max(column_num),
            column_letters=list(column_letter), 
            vnames=list(vname),
            .by=c(table, year))
tabcols_nested

# tabcols_nested |>
#   unnest(cols=column_letters)

# define the tables to get
tabget <- tabmeta |> 
  filter(table %in% tabs) |> 
  select(table, year, fname, table_description) |> 
  left_join(tabrows, by = join_by(table, year)) |> 
  left_join(tabcols_nested, by = join_by(table, year))

# fname <- "15in11si.xls"
# startrow <- 10; endrow <- 29; maxcol <- 7; column_letters <- list(c("A", "B", "D", "G")); colnames <- list(c("x1", "x2", "x3", "x4"))


get_irsdata <- function(fname, startrow, endrow, maxcol, column_letters, vnames){
  # a single file, a single year
  fpath <- path(irsd, fname)
  
  # read relevant rows, but all columns from the first column through the last in columns
  #   we cannot read just the desired columns, due to limitations of read_excel
  
  # assumes irsd and allcols exist
  
  df1 <- read_excel(fpath, sheet=1, 
                    range=cellranger::cell_limits(c(startrow, 1), 
                                                  c(endrow, maxcol)),
                    col_names = allcols[1:maxcol], col_types = "text")
  
  # keep desired columns, substitute the passed-in column names for letters, and pivot
  df2 <- df1 |> 
    select(all_of(unlist(column_letters))) |> 
    setNames(unlist(vnames)) |> 
    mutate(rownum=row_number()) |> 
    pivot_longer(cols=-c(rownum, incrange), names_to = "vname", values_to = "ptarget") |> 
    mutate(ptarget=as.numeric(ptarget)) |>  # every column had better be a number stored as text!
    relocate(rownum)
  df2
}


ptargets_nested <- tabget |> 
  # filter(row_number() == 1) |> 
  mutate(targets=get_irsdata(fname, startrow, endrow, maxcol, column_letters, vnames) |> list(), .by=fname)
ptargets_nested
ptargets_nested |> unnest(col=c(targets))

ptargets <- ptargets_nested |> 
  mutate(year=as.integer(year)) |> 
  select(table, year, fname, targets, table_description) |>
  unnest(col=targets) |> 
  left_join(tabcols |> select(table, year, column_letter, vname),
            by = join_by(table, year, vname)) |> 
  relocate(column_letter, .after=fname) |> 
  arrange(table, year, vname, rownum)

saveRDS(ptargets, here::here("data", "potential_targets.rds"))

ptargets |> 
  write_csv(here::here("data", "potential_targets.csv"))



```

## Show potential targets {#sec-show-targets}

```{r}
#| label: show-targets
#| output: true
#| column: page

ptargets <- readRDS(here::here("data", "potential_targets.rds"))

library(DT)
# datatable(ptargets, options = list(scrollX = TRUE, scrollY = '400px', paging = TRUE))

datatable(ptargets |> select(-table_description),
          options = list(scrollX = TRUE, scrollY = '1500px', pageLength = 20),
          filter="top") |>
  formatCurrency(columns = c("ptarget"), currency="", digits=0)


```


